---
title: Construct a DFM
weight: 10
draft: false
---

```{r message=FALSE}
require(quanteda)
require(quanteda.textstats)
options(width = 110)
```

`dfm()` constructs a document-feature matrix (DFM) from a tokens object.

```{r}
toks_inaug <- tokens(data_corpus_inaugural, remove_punct = TRUE)
dfmat_inaug <- dfm(toks_inaug)
print(dfmat_inaug)
```

You can get the number of documents and features `ndoc()` and `nfeat()`.

```{r}
ndoc(dfmat_inaug)
nfeat(dfmat_inaug)
```

You can also obtain the names of documents and features by `docnames()` and `featnames()`.

```{r}
head(docnames(dfmat_inaug), 20)
head(featnames(dfmat_inaug), 20)
```

Just like normal matrices, you can use`rowSums()` and `colSums()` to calculate marginals. 

```{r}
head(rowSums(dfmat_inaug), 10)
head(colSums(dfmat_inaug), 10)
```

The most frequent features can be found using `topfeatures()`.

```{r}
topfeatures(dfmat_inaug, 10)
```

If you want to convert the frequency count to a proportion within documents, use `dfm_weight(scheme  = "prop")`.

```{r}
dfmat_inaug_prop <- dfm_weight(dfmat_inaug, scheme  = "prop")
print(dfmat_inaug_prop)
```

{{% notice tip %}}
`textstat_frequency()`, described in Chapter 4, offers more advanced functionalities than `topfeatures()` and returns a `data.frame` object, making it easier to use the output for further analyses.
{{% /notice %}}


You can also weight the frequency count by uniqueness of the features across documents using `dfm_tfidf()`.

```{r}
dfmat_inaug_tfidf <- dfm_tfidf(dfmat_inaug)
print(dfmat_inaug_tfidf)
```

{{% notice warning %}}
Even after applying  `dfm_weight()` or `dfm_tfidf()`, `topfeatures()` works on a document-feature matrix, but it can be misleading if applied to more than one document.
{{% /notice %}}
