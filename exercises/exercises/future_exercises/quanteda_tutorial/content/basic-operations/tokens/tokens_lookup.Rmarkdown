---
title: Look up dictionary
weight: 50
draft: false
---

```{r message=FALSE}
require(quanteda)
options(width = 110)
```

```{r}
toks <- tokens(data_char_ukimmig2010)
```

`tokens_lookup()` is the most flexible dictionary look up function in **quanteda**. We use [geographical dictionary](https://raw.githubusercontent.com/quanteda/tutorials.quanteda.io/master/content/dictionary/newsmap.yml) from the [**newsmap**](https://cran.r-project.org/web/packages/newsmap/index.html) package as an example. Using `dictionary()`, you can import dictionary files in the Wordstat, LIWC, Yoshicoder, Lexicoder and YAML formats.

```{r}
dict_newsmap <- dictionary(file = "../../dictionary/newsmap.yml")
```

Note that you can access the dictionary in various languages (currently English, German, Japanese, Russian, and Spanish) with the **newsmap** package.

The geographical dictionary comprises of names of countries and cities (and their demonyms) in a hierarchical structure (countries are nested in world regions and sub-regions).

```{r}
length(dict_newsmap)
names(dict_newsmap)
names(dict_newsmap[["AFRICA"]])
dict_newsmap[["AFRICA"]][["NORTH"]]
```

The `levels` argument determines the keys to be recorded in a resulting tokens object.

```{r}
# use level of continents
toks_region <- tokens_lookup(toks, dictionary = dict_newsmap, levels = 1)
print(toks_region)
```

```{r}
# use level of countries
toks_country <- tokens_lookup(toks, dictionary = dict_newsmap, levels = 3)
print(toks_country)
```

You can also use run a keyword-in-context analysis by looking up the mentions of all African countries and the words surrounding the countries.

```{r}
kwic(toks, dict_newsmap["AFRICA"])
```

You can define your own dictionary by passing a named list of characters to `dictionary()`.

```{r}
dict <- dictionary(list(refugee = c("refugee*", "asylum*"),
                        worker = c("worker*", "employee*")))
print(dict)
dict_toks <- tokens_lookup(toks, dictionary = dict)
print(dict_toks)
dfm(dict_toks)
```

{{% notice tip %}}
`tokens_lookup()` ignores multiple matches of dictionary values for the same key with the same token to avoid double counting. For example, if `US = c("United States of America", "United States")` is in your dictionary, you get "US" only once for a sequence of tokens `"United" "States" "of" "America"`.
{{% /notice %}}
